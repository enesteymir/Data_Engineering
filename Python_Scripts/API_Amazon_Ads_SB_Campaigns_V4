{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "85a74f25-2114-41d2-9813-1f784bec80eb",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Related Doc : https://advertising.amazon.com/API/docs/en-us/reference/common-models/campaigns#sponsored-brands\n",
    "# Some migration guides : https://advertising.amazon.com/API/docs/en-us/reference/migration-guides/sb-v3-v4\n",
    "\n",
    "dbutils.widgets.text('channel', '')\n",
    "channel = dbutils.widgets.get('channel')\n",
    "\n",
    "from time import sleep\n",
    "import requests\n",
    "import re\n",
    "import json\n",
    "import datetime\n",
    "import gzip\n",
    "\n",
    "\n",
    "C_KEY = 'amzn1.application-oa2-client.c47835........b3'\n",
    "C_SECRET_KEY = 'd128..........a767c4'\n",
    "\n",
    "if channel == 'eBazaaris':\n",
    "    \n",
    "    C_REFRESH_TOKEN = 'Atzr|IwEBILSZA-.......7r3bXFg'\n",
    "\n",
    "    ProfileIds = ['2169250159944659', '2155969205123194']\n",
    "     \n",
    "\n",
    "elif channel == 'Homeo':\n",
    "    \n",
    "    C_REFRESH_TOKEN = 'Atzr|IwEBYEL.........7cOJ'\n",
    "    \n",
    "    ProfileIds = ['1722443589807669', '2182027654244981']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ffa14823-5de8-42ed-9538-b3cc432f6f76",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Get Access Token\n",
    "def get_access_token():\n",
    "    global refresh_token\n",
    "    url = \"https://api.amazon.co.uk/auth/o2/token\"\n",
    "\n",
    "    body = {\n",
    "            \"grant_type\":\"refresh_token\",\n",
    "            \"client_id\": C_KEY,\n",
    "            \"client_secret\": C_SECRET_KEY,\n",
    "            \"refresh_token\":C_REFRESH_TOKEN\n",
    "           }\n",
    " \n",
    "    response = requests.post(url = url, data = body)\n",
    "    return response.json()['access_token']\n",
    "\n",
    "C_ACCESS_TOKEN = get_access_token()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "37c626c8-d503-4b11-8cdc-abc3ca635ef7",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Request the Campaigns - SB - V4 - First Page\n",
    "def get_campaigns(ProfileId):\n",
    "    global C_ACCESS_TOKEN, C_KEY\n",
    "    url = \"https://advertising-api-eu.amazon.com/sb/v4/campaigns/list\"\n",
    "\n",
    "    headers = {\n",
    "                'Authorization'                   : 'Bearer ' + C_ACCESS_TOKEN,\n",
    "                'Amazon-Advertising-API-ClientId' :  C_KEY,\n",
    "                'Amazon-Advertising-API-Scope'    :  ProfileId,\n",
    "                'Content-Type'                    : 'application/vnd.sbcampaignresource.v4+json',\n",
    "                'Accept'                          : 'application/vnd.sbcampaignresource.v4+json'\n",
    "                }\n",
    "\n",
    "\n",
    "    response = requests.post(url = url, headers = headers)\n",
    "    response = response.json()\n",
    "    return response\n",
    "\n",
    "\n",
    "\n",
    "# Request the Campaigns Next Page\n",
    "def get_campaigns_next(ProfileId, nextToken):\n",
    "    global C_ACCESS_TOKEN, C_KEY\n",
    "    url = \"https://advertising-api-eu.amazon.com/sb/v4/campaigns/list\"\n",
    "\n",
    "    headers = {\n",
    "                'Authorization'                   : 'Bearer ' + C_ACCESS_TOKEN,\n",
    "                'Amazon-Advertising-API-ClientId' :  C_KEY,\n",
    "                'Amazon-Advertising-API-Scope'    :  ProfileId,\n",
    "                'Content-Type'                    : 'application/vnd.sbcampaignresource.v4+json',\n",
    "                'Accept'                          : 'application/vnd.sbcampaignresource.v4+json'\n",
    "                }\n",
    "    \n",
    "\n",
    "    body = {\n",
    "            \"nextToken\": nextToken\n",
    "           }\n",
    "\n",
    "\n",
    "    response = requests.post(url = url, headers = headers, json=body)\n",
    "    response = response.json()\n",
    "    return response\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Get all campaigns\n",
    "def get_campaigns_all(profile_id):\n",
    "    page = 1\n",
    "    response = get_campaigns(profile_id)\n",
    "    \n",
    "    while True:\n",
    "        file_path = f'dbfs:/mnt/amazon-campaigns-all-sb/{channel}_{profile_id}_{page}.json'\n",
    "        dbutils.fs.put(file_path, json.dumps(response), overwrite=True)\n",
    "        print(f\"Page {page} of {profile_id} loaded\")\n",
    "        \n",
    "        next_token = response.get('nextToken')\n",
    "        if not next_token:\n",
    "            break\n",
    "        \n",
    "        response = get_campaigns_next(profile_id, next_token)\n",
    "        page += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7522e6dd-f0aa-4428-874e-c5b945d2d574",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/mnt/amazon-campaigns-all-sb has been unmounted.\n"
     ]
    }
   ],
   "source": [
    "containerName = \"amazon-campaigns-all-sb\"\n",
    "storageAccountName = \"blobads\"\n",
    "sas = \"sp=racwdli&st=2022-11-08T21:14:07Z&se=2040-11-09T05:14:07Z&spr=https&sv=2021-06-08&sr=c&sig=...........D\"\n",
    "config = \"fs.azure.sas.\" + containerName+ \".\" + storageAccountName + \".blob.core.windows.net\"\n",
    "\n",
    "try:\n",
    "    dbutils.fs.unmount(\"/mnt/amazon-campaigns-all-sb\")\n",
    "except:\n",
    "    pass\n",
    "    \n",
    "try:\n",
    "    dbutils.fs.mount( source = \"wasbs://{}@{}.blob.core.windows.net\".format(containerName,storageAccountName),\n",
    "                      mount_point = \"/mnt/amazon-campaigns-all-sb\",\n",
    "                      extra_configs = {config : sas}\n",
    "                    )\n",
    "except:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the campaigns for all market\n",
    "for profileid in ProfileIds:\n",
    "    get_campaigns_all(profileid)"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "1"
   },
   "inputWidgetPreferences": null,
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4,
    "widgetLayout": []
   },
   "notebookName": "amazon_campaigns_all_sb",
   "widgets": {
    "channel": {
     "currentValue": "Homeo",
     "nuid": "82bf58f9-7e45-489c-ad43-a5e96b922f52",
     "typedWidgetInfo": {
      "autoCreated": false,
      "defaultValue": "",
      "label": null,
      "name": "channel",
      "options": {
       "validationRegex": null,
       "widgetDisplayType": "Text"
      },
      "parameterDataType": "String"
     },
     "widgetInfo": {
      "defaultValue": "",
      "label": null,
      "name": "channel",
      "options": {
       "autoCreated": null,
       "validationRegex": null,
       "widgetType": "text"
      },
      "widgetType": "text"
     }
    }
   }
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
